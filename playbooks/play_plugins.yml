---
- name: Play Plugin Updater
  hosts: localhost
  connection: local
  gather_facts: false

  vars_files:
    - ../applications.json   # contains version map

  vars:
    pom_file: "{{ lookup('env', 'PWD') }}/fixtures/sample_proj/pom.xml"
    pom_ns: { m: "http://maven.apache.org/POM/4.0.0" }
    dependencies_json_path: "{{ playbook_dir }}/../dependencies.json"

  pre_tasks:
    # -------------------------------------------------------------------
    # Load and normalize dependencies.json
    # -------------------------------------------------------------------
    - name: Load dependencies.json
      ansible.builtin.set_fact:
        deps_raw: "{{ lookup('file', '../dependencies.json') | from_json }}"

    - name: Validate dependencies.json structure
      ansible.builtin.assert:
        that: deps_raw is mapping
        fail_msg: "dependencies.json must be an object of artifactId -> version"

    - name: Normalize dependency map (lowercase keys, trimmed values)
      ansible.builtin.set_fact:
        deps_desired: "{{ (deps_desired | default({})) | combine({ (item.key | lower | trim): (item.value | string | trim) }) }}"
      loop: "{{ deps_raw | dict2items }}"

    - name: dependencies.json summary
      ansible.builtin.debug:
        msg:
          total_entries: "{{ deps_desired | length }}"
          sample: "{{ (deps_desired | dict2items)[:5] }}"
    
    - name: Read POM once
      ansible.builtin.slurp:
        src: "{{ pom_file }}"
      register: pom_raw
  
  tasks:
    # ---------- Extract current state ----------
    - name: Extract plugins
      ansible.builtin.set_fact:
        plugins: "{{ pom_raw.content | b64decode | maven_plugins }}"
    
    - name: Extract plugin dependencies
      ansible.builtin.set_fact:
        plugin_deps: "{{ pom_raw.content | b64decode | maven_plugin_deps }}"

    - name: Snapshot (debug)
      ansible.builtin.debug:
        msg:
          plugins: "{{ plugins }}"
          deps: "{{ plugin_deps }}"
    
    # ---------- Plugin plan ----------
    - name: Build current plugin map {artifactId -> version}
      ansible.builtin.set_fact:
        plugins_map: >-
          {{
            dict(
              (plugins | map(attribute='artifactId') | list)
              | zip(plugins | map(attribute='version') | list)
            )
          }}
    
    - name: Compute plugin update plan
      vars:
        desired: "{{ deps_desired.get(item|lower) | default('') }}"
        current: "{{ plugins_map.get(item) | default('') }}"
      ansible.builtin.set_fact:
        plugin_update_plan: >-
          {{
            (plugin_update_plan | default([]))
            + ([{
                  'artifactId': item,
                  'current': current,
                  'desired': desired
                }] if (desired|length>0 and current|length>0 and desired != current) else [])
          }}
      loop: "{{ plugins | map(attribute='artifactId') | list }}"
      loop_control:
        label: "{{ item }}"

    - name: Show plugin update plan (dry-run)
      ansible.builtin.debug:
        msg:
          count: "{{ plugin_update_plan | length }}"
          plan: "{{ plugin_update_plan }}"
    
    - name: Inspect desired vs current per plugin (debug-only)
      ansible.builtin.debug:
        msg:
          plugin: "{{ item }}"
          current: "{{ plugins_map.get(item) | default('') }}"
          desired: "{{ deps_desired.get(item|lower) | default('') }}"
      loop: "{{ plugins | map(attribute='artifactId') | list }}"
      loop_control:
        label: "{{ item }}"

    # ---------- Optional apply step (plugins) ----------
    # Enable with: -e apply_changes=true
    - name: Apply plugin version updates (opt-in)
      when: (apply_changes | default(false) | bool) and (plugin_update_plan | length) > 0
      block:
        - name: Ensure plugin <version> node exists
          community.general.xml:
            path: "{{ pom_file }}"
            xpath: >-
              /*[local-name()='project']
              /*[local-name()='build']
              /*[local-name()='plugins']
              /*[local-name()='plugin'][*[local-name()='artifactId']='{{ item.artifactId }}']
              /*[local-name()='version']
            state: present
          loop: "{{ plugin_update_plan }}"
          loop_control:
            label: "{{ item.artifactId }} ensure version node"

        - name: Set plugin version
          community.general.xml:
            path: "{{ pom_file }}"
            xpath: >-
              /*[local-name()='project']
              /*[local-name()='build']
              /*[local-name()='plugins']
              /*[local-name()='plugin'][*[local-name()='artifactId']='{{ item.artifactId }}']
              /*[local-name()='version']
            value: "{{ item.desired }}"
            state: present
            pretty_print: true
          loop: "{{ plugin_update_plan }}"
          loop_control:
            label: "{{ item.artifactId }} {{ item.current }} → {{ item.desired }}"

    # ---------- Plugin-dep plan ----------
    - name: Build plugin-dep pairs
      ansible.builtin.set_fact:
        _dep_pairs: >-
          {{
            (plugin_deps | map(attribute='plugin') | list)
            | zip(plugin_deps | map(attribute='artifactId') | list)
            | list
          }}

    - name: Build plugin-dep keys
      ansible.builtin.set_fact:
        _dep_keys: "{{ _dep_pairs | map('join','::') | list }}"

    - name: Build plugin-dep versions list
      ansible.builtin.set_fact:
        _dep_versions: "{{ plugin_deps | map(attribute='version') | list }}"

    - name: Build current plugin-dep map {plugin::dep -> version}
      ansible.builtin.set_fact:
        plugin_deps_map: "{{ dict(_dep_keys | zip(_dep_versions)) }}"

    - name: Inspect desired vs current per plugin-dep (debug-only)
      vars:
        key: "{{ (item.plugin ~ '::' ~ item.artifactId) | lower }}"
      ansible.builtin.debug:
        msg:
          pair: "{{ item.plugin }}::{{ item.artifactId }}"
          current: "{{ plugin_deps_map.get(item.plugin ~ '::' ~ item.artifactId) | default('') }}"
          desired: "{{ deps_desired.get(key) | default('') }}"
      loop: "{{ plugin_deps }}"
      loop_control:
        label: "{{ item.plugin }}::{{ item.artifactId }}"

    - name: Compute plugin-dep update plan
      vars:
        key: "{{ (item.plugin ~ '::' ~ item.artifactId) | lower }}"
        pair: "{{ item.plugin ~ '::' ~ item.artifactId }}"
        current: "{{ plugin_deps_map.get(pair) | default('') }}"
        desired: "{{ deps_desired.get(key) | default('') }}"
      ansible.builtin.set_fact:
        plugin_dep_update_plan: >-
          {{
            (plugin_dep_update_plan | default([]))
            + ([{
                  'plugin': item.plugin,
                  'artifactId': item.artifactId,
                  'pair': pair,
                  'current': current,
                  'desired': desired
                }] if (desired|length>0 and current|length>0 and desired != current) else [])
          }}
      loop: "{{ plugin_deps }}"
      loop_control:
        label: "{{ item.plugin }}::{{ item.artifactId }}"

    - name: Show plugin-dep update plan (dry-run)
      ansible.builtin.debug:
        msg:
          count: "{{ plugin_dep_update_plan | length }}"
          plan: "{{ plugin_dep_update_plan }}"

    # ---------- Safety: assert requested dep overrides exist in POM ----------
    - name: Assert requested dep overrides exist in POM
      vars:
        requested_dep_keys: "{{ (deps_desired | dict2items) | map(attribute='key') | select('search', '::') | list }}"
        present_dep_keys: "{{ plugin_deps_map.keys() | map('lower') | list }}"
        missing: "{{ requested_dep_keys | difference(present_dep_keys) }}"
      ansible.builtin.assert:
        that: missing | length == 0
        fail_msg: "Requested plugin-dep overrides not found in POM: {{ missing }}"

    # ---------- Optional apply step (deps) ----------
    # Enable with: -e apply_changes=true
    - name: Apply plugin dependency version updates (opt-in)
      when: (apply_changes | default(false) | bool) and (plugin_dep_update_plan | length) > 0
      block:
        - name: Ensure dep <version> node exists
          community.general.xml:
            path: "{{ pom_file }}"
            xpath: >-
              /*[local-name()='project']
              /*[local-name()='build']
              /*[local-name()='plugins']
              /*[local-name()='plugin'][*[local-name()='artifactId']='{{ item.plugin }}']
              /*[local-name()='dependencies']
              /*[local-name()='dependency'][*[local-name()='artifactId']='{{ item.artifactId }}']
              /*[local-name()='version']
            state: present
          loop: "{{ plugin_dep_update_plan }}"
          loop_control:
            label: "{{ item.pair }} ensure version node"

        - name: Set dep version
          community.general.xml:
            path: "{{ pom_file }}"
            xpath: >-
              /*[local-name()='project']
              /*[local-name()='build']
              /*[local-name()='plugins']
              /*[local-name()='plugin'][*[local-name()='artifactId']='{{ item.plugin }}']
              /*[local-name()='dependencies']
              /*[local-name()='dependency'][*[local-name()='artifactId']='{{ item.artifactId }}']
              /*[local-name()='version']
            value: "{{ item.desired }}"
            state: present
            pretty_print: true
          loop: "{{ plugin_dep_update_plan }}"
          loop_control:
            label: "{{ item.pair }} {{ item.current }} → {{ item.desired }}"

    # ---------- (Optional) Re-slurp and show post-apply snapshot ----------
    - name: Re-slurp POM after apply (optional)
      when: apply_changes | default(false) | bool
      ansible.builtin.slurp:
        src: "{{ pom_file }}"
      register: pom_raw_after

    - name: Re-extract plugins & deps (optional)
      when: apply_changes | default(false) | bool
      ansible.builtin.set_fact:
        plugins_after: "{{ pom_raw_after.content | b64decode | maven_plugins }}"
        plugin_deps_after: "{{ pom_raw_after.content | b64decode | maven_plugin_deps }}"

    - name: Show post-apply snapshot (optional)
      when: apply_changes | default(false) | bool
      ansible.builtin.debug:
        msg:
          plugins_after: "{{ plugins_after }}"
          deps_after: "{{ plugin_deps_after }}"
    


    - name: Init summary lines
      ansible.builtin.set_fact:
        plugin_update_summary_lines: []
        plugin_dep_update_summary_lines: []

    - name: Build plugin update summary lines
      vars:
        desired: "{{ deps_desired.get(item | lower) | default('') }}"
        current: "{{ plugins_map.get(item) | default('') }}"
      ansible.builtin.set_fact:
        plugin_update_summary_lines: >-
          {{
            plugin_update_summary_lines + [
              (desired | length == 0)
                | ternary(
                    "⚫ No desired version found for " ~ item,
                    (current != desired)
                      | ternary(
                          (apply_changes | default(false) | bool)
                            | ternary("✅ Updated " ~ item ~ " from " ~ current ~ " → " ~ desired,
                                      "🟡 Would update " ~ item ~ " from " ~ current ~ " → " ~ desired),
                          "⚪ " ~ item ~ " already up to date (" ~ current ~ ")"
                      )
                )
            ]
          }}
      loop: "{{ plugins | map(attribute='artifactId') | list }}"
      loop_control: { label: "{{ item }}" }

    - name: Build plugin-dep update summary lines
      vars:
        pair: "{{ item.plugin ~ '::' ~ item.artifactId }}"
        key: "{{ pair | lower }}"
        desired: "{{ deps_desired.get(key) | default('') }}"
        current: "{{ plugin_deps_map.get(pair) | default('') }}"
      ansible.builtin.set_fact:
        plugin_dep_update_summary_lines: >-
          {{
            plugin_dep_update_summary_lines + [
              (desired | length == 0)
                | ternary(
                    "⚫ No desired version found for " ~ pair,
                    (current != desired)
                      | ternary(
                          (apply_changes | default(false) | bool)
                            | ternary("✅ Updated " ~ pair ~ " from " ~ current ~ " → " ~ desired,
                                      "🟡 Would update " ~ pair ~ " from " ~ current ~ " → " ~ desired),
                          "⚪ " ~ pair ~ " already up to date (" ~ current ~ ")"
                      )
                )
            ]
          }}
      loop: "{{ plugin_deps }}"
      loop_control: { label: "{{ item.plugin }}::{{ item.artifactId }}" }

      # Normalize any accidental "\n" sequences to real newlines
    - name: Normalize plugin summary lines
      ansible.builtin.set_fact:
        plugin_update_summary_lines: >-
          {{ plugin_update_summary_lines | map('regex_replace', '\\\\n', '\n') | list }}

    - name: Normalize plugin-dep summary lines
      ansible.builtin.set_fact:
        plugin_dep_update_summary_lines: >-
          {{ plugin_dep_update_summary_lines | map('regex_replace', '\\\\n', '\n') | list }}

    # Build the final blob as a literal block so newlines aren't escaped
    - name: Show plugin enforcement summary
      ansible.builtin.debug:
        msg: |
          === Plugin Versions ===
          {{ (plugin_update_summary_lines | length > 0)
              | ternary(plugin_update_summary_lines | join('\n'), '⚪ (none)') }}

          === Plugin Dependency Versions ===
          {{ (plugin_dep_update_summary_lines | length > 0)
              | ternary(plugin_dep_update_summary_lines | join('\n'), '⚪ (none)') }}
