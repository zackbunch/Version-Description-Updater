---
# ---------- Extract current state ----------
- name: Extract plugins
  ansible.builtin.set_fact:
    plugins: "{{ pom_raw.content | b64decode | maven_plugins }}"
    plugin_deps: "{{ pom_raw.content | b64decode | maven_plugin_deps }}"

# ---------- Plugin plan ----------
- name: Build plugin map {artifactId_lc -> version}
  ansible.builtin.set_fact:
    plugins_map_lc: >-
      {{
        dict(
          (plugins | map(attribute='artifactId') | map('lower') | list)
          | zip(plugins | map(attribute='version') | list)
        )
      }}

- name: Compute plugin update plan
  vars:
    aid_lc: "{{ item | lower | trim }}"
    current: "{{ plugins_map_lc.get(aid_lc, '') | string | trim }}"
    desired: "{{ deps_desired.get(aid_lc, '') | string | trim }}"
  ansible.builtin.set_fact:
    plugin_update_plan: >-
      {{
        (plugin_update_plan | default([]))
        + ([{
              'artifactId': item,
              'artifactId_lc': aid_lc,
              'current': current,
              'desired': desired
            }] if (desired and current and desired != current) else [])
      }}
  loop: "{{ plugins | map(attribute='artifactId') | list }}"
  loop_control:
    label: "{{ item }}"

# ---------- Plugin-dependency plan ----------
- name: Build plugin-dep map {(plugin::dep)_lc -> version}
  ansible.builtin.set_fact:
    plugin_deps_map_lc: >-
      {{
        dict(
          (
            (plugin_deps | map(attribute='plugin') | list)
            | zip(plugin_deps | map(attribute='artifactId') | list)
          )
          | map('join', '::')
          | map('lower')
          | map('trim')
          | list
          | zip(plugin_deps | map(attribute='version') | list)
        )
      }}

- name: Compute plugin-dep update plan
  vars:
    pair_raw: "{{ item.plugin ~ '::' ~ item.artifactId }}"
    pair_lc: "{{ pair_raw | lower | trim }}"
    current: "{{ plugin_deps_map_lc.get(pair_lc, '') | string | trim }}"
    desired: "{{ deps_desired.get(pair_lc, '') | string | trim }}"
  ansible.builtin.set_fact:
    plugin_dep_update_plan: >-
      {{
        (plugin_dep_update_plan | default([]))
        + ([{
              'plugin': item.plugin,
              'artifactId': item.artifactId,
              'pair': pair_raw,
              'pair_lc': pair_lc,
              'current': current,
              'desired': desired
            }] if (desired and current and desired != current) else [])
      }}
  loop: "{{ plugin_deps }}"
  loop_control:
    label: "{{ item.plugin }}::{{ item.artifactId }}"

# ---------- Apply (only if apply_changes=true) ----------
- name: Backup POM before mutation
  when: (apply_changes | default(false)) | bool and (
          (plugin_update_plan | default([])) | length > 0 or
          (plugin_dep_update_plan | default([])) | length > 0
        )
  ansible.builtin.copy:
    src: "{{ pom_file }}"
    dest: "{{ pom_file }}.bak"
    remote_src: true
    mode: preserve

- name: Set plugin <version> (idempotent)
  when: (apply_changes | default(false)) | bool and (plugin_update_plan | length > 0)
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:build/m:plugins/m:plugin[m:artifactId='{{ item.artifactId }}']/m:version"
    namespaces: "{{ pom_ns }}"
    value: "{{ item.desired }}"
    state: present
  loop: "{{ plugin_update_plan }}"
  loop_control:
    label: "{{ item.artifactId }} {{ item.current }} → {{ item.desired }}"

- name: Set plugin-dep <version> (idempotent)
  when: (apply_changes | default(false)) | bool and (plugin_dep_update_plan | length > 0)
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:build/m:plugins/m:plugin[m:artifactId='{{ item.plugin }}']/m:dependencies/m:dependency[m:artifactId='{{ item.artifactId }}']/m:version"
    namespaces: "{{ pom_ns }}"
    value: "{{ item.desired }}"
    state: present
  loop: "{{ plugin_dep_update_plan }}"
  loop_control:
    label: "{{ item.pair }} {{ item.current }} → {{ item.desired }}"

# ---------- Optional verification ----------
- name: Re-slurp pom.xml (post-apply)
  when: (apply_changes | default(false)) | bool and (
          (plugin_update_plan | length > 0) or
          (plugin_dep_update_plan | length > 0)
        )
  ansible.builtin.slurp:
    src: "{{ pom_file }}"
  register: pom_raw_after

- name: Re-extract plugin data (post-apply)
  when:
    - pom_raw_after is defined
    - pom_raw_after is mapping
    - "'content' in pom_raw_after"
  ansible.builtin.set_fact:
    plugins_after: "{{ pom_raw_after['content'] | b64decode | maven_plugins }}"
    plugin_deps_after: "{{ pom_raw_after['content'] | b64decode | maven_plugin_deps }}"

# ---------- Summaries ----------
- name: Set plugin summary
  ansible.builtin.set_fact:
    plugins_update_summary: >-
      {{
        (plugin_update_plan | length > 0)
        | ternary(
            '✅ Updated ' ~ (plugin_update_plan | length) ~ ' plugin version(s): ' ~
            (plugin_update_plan | map(attribute='artifactId') | list | join(', ')),
            '⚪ No plugin updates required.'
          )
      }}

- name: Set plugin-dep summary
  ansible.builtin.set_fact:
    plugin_deps_update_summary: >-
      {{
        (plugin_dep_update_plan | length > 0)
        | ternary(
            '✅ Updated ' ~ (plugin_dep_update_plan | length) ~ ' plugin dependency version(s): ' ~
            (plugin_dep_update_plan | map(attribute='pair') | list | join(', ')),
            '⚪ No plugin dependency updates required.'
          )
      }}