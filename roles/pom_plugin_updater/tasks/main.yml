---
# ---------- Extract current state ----------
- name: Extract plugins
  ansible.builtin.set_fact:
    plugins: "{{ pom_raw.content | b64decode | maven_plugins }}"

- name: Extract plugin dependencies
  ansible.builtin.set_fact:
    plugin_deps: "{{ pom_raw.content | b64decode | maven_plugin_deps }}"

# ---------- Plugin plan ----------
- name: Build current plugin map {artifactId -> version}
  ansible.builtin.set_fact:
    plugins_map: >-
      {{
        dict(
          (plugins | map(attribute='artifactId') | list)
          | zip(plugins | map(attribute='version') | list)
        )
      }}

- name: Compute plugin update plan
  vars:
    desired: "{{ deps_desired.get(item | lower) | default('') }}"
    current: "{{ plugins_map.get(item) | default('') }}"
  ansible.builtin.set_fact:
    plugin_update_plan: >-
      {{
        (plugin_update_plan | default([]))
        + ([{
              'artifactId': item,
              'current': current,
              'desired': desired
            }] if (desired | length > 0 and current | length > 0 and desired != current) else [])
      }}
  loop: "{{ plugins | map(attribute='artifactId') | list }}"
  loop_control:
    label: "{{ item }}"

# ---------- Plugin-dep plan ----------
- name: Build plugin-dep map {plugin::dep -> version}
  ansible.builtin.set_fact:
    plugin_deps_map: >-
      {{
        dict(
          (plugin_deps | map(attribute='plugin') | list | zip(plugin_deps | map(attribute='artifactId') | list))
          | map('join', '::')
          | list
          | zip(plugin_deps | map(attribute='version') | list)
        )
      }}

- name: Compute plugin-dep update plan
  vars:
    pair: "{{ item.plugin ~ '::' ~ item.artifactId }}"
    key: "{{ pair | lower }}"
    current: "{{ plugin_deps_map.get(pair) | default('') }}"
    desired: "{{ deps_desired.get(key) | default('') }}"
  ansible.builtin.set_fact:
    plugin_dep_update_plan: >-
      {{
        (plugin_dep_update_plan | default([]))
        + ([{
              'plugin': item.plugin,
              'artifactId': item.artifactId,
              'pair': pair,
              'current': current,
              'desired': desired
            }] if (desired | length > 0 and current | length > 0 and desired != current) else [])
      }}
  loop: "{{ plugin_deps }}"
  loop_control:
    label: "{{ item.plugin }}::{{ item.artifactId }}"

# ---------- Apply (gated by apply_changes=true) ----------
- name: Backup POM before mutation
  when: (apply_changes | default(false)) | bool and (
          (plugin_update_plan | default([])) | length > 0 or
          (plugin_dep_update_plan | default([])) | length > 0
        )
  ansible.builtin.copy:
    src: "{{ pom_file }}"
    dest: "{{ pom_file }}.bak"
    remote_src: true
    mode: preserve

# Plugins
- name: Ensure plugin <version> exists
  when: (apply_changes | default(false)) | bool and (plugin_update_plan | default([])) | length > 0
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: >-
      /*[local-name()='project']
      /*[local-name()='build']
      /*[local-name()='plugins']
      /*[local-name()='plugin'][*[local-name()='artifactId']='{{ item.artifactId }}']
      /*[local-name()='version']
    state: present
  loop: "{{ plugin_update_plan }}"
  loop_control:
    label: "{{ item.artifactId }} ensure <version>"

- name: Set plugin <version>
  when: (apply_changes | default(false)) | bool and (plugin_update_plan | default([])) | length > 0
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: >-
      /*[local-name()='project']
      /*[local-name()='build']
      /*[local-name()='plugins']
      /*[local-name()='plugin'][*[local-name()='artifactId']='{{ item.artifactId }}']
      /*[local-name()='version']
    value: "{{ item.desired }}"
    state: present
    pretty_print: true
  loop: "{{ plugin_update_plan }}"
  loop_control:
    label: "{{ item.artifactId }} {{ item.current }} -> {{ item.desired }}"

# Plugin dependencies
- name: Ensure plugin-dep <version> exists
  when: (apply_changes | default(false)) | bool and (plugin_dep_update_plan | default([])) | length > 0
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: >-
      /*[local-name()='project']
      /*[local-name()='build']
      /*[local-name()='plugins']
      /*[local-name()='plugin'][*[local-name()='artifactId']='{{ item.plugin }}']
      /*[local-name()='dependencies']
      /*[local-name()='dependency'][*[local-name()='artifactId']='{{ item.artifactId }}']
      /*[local-name()='version']
    state: present
  loop: "{{ plugin_dep_update_plan }}"
  loop_control:
    label: "{{ item.pair }} ensure <version>"

- name: Set plugin-dep <version>
  when: (apply_changes | default(false)) | bool and (plugin_dep_update_plan | default([])) | length > 0
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: >-
      /*[local-name()='project']
      /*[local-name()='build']
      /*[local-name()='plugins']
      /*[local-name()='plugin'][*[local-name()='artifactId']='{{ item.plugin }}']
      /*[local-name()='dependencies']
      /*[local-name()='dependency'][*[local-name()='artifactId']='{{ item.artifactId }}']
      /*[local-name()='version']
    value: "{{ item.desired }}"
    state: present
    pretty_print: true
  loop: "{{ plugin_dep_update_plan }}"
  loop_control:
    label: "{{ item.pair }} {{ item.current }} -> {{ item.desired }}"

# ---------- (Optional) Post-apply verify ----------
- name: Re-slurp pom.xml (post-apply)
  when: (apply_changes | default(false)) | bool and (
          (plugin_update_plan | default([])) | length > 0 or
          (plugin_dep_update_plan | default([])) | length > 0
        )
  ansible.builtin.slurp:
    src: "{{ pom_file }}"
  register: pom_raw_after

- name: Re-extract after apply (post-apply)
  when: (apply_changes | default(false)) | bool and (
          (plugin_update_plan | default([])) | length > 0 or
          (plugin_dep_update_plan | default([])) | length > 0
        )
  ansible.builtin.set_fact:
    plugins_after: "{{ pom_raw_after.content | b64decode | maven_plugins }}"
    plugin_deps_after: "{{ pom_raw_after.content | b64decode | maven_plugin_deps }}"

# ---------- Summaries (compact) ----------
- name: Set plugin compact summary
  ansible.builtin.set_fact:
    plugins_update_summary: >-
      {{
        (plugin_update_plan | default([]) | length > 0)
        | ternary(
            '✅ Updated ' ~ (plugin_update_plan | length) ~ ' plugin version(s): ' ~
            (plugin_update_plan | map(attribute='artifactId') | list | join(', ')),
            '⚪ No plugin updates required.'
          )
      }}

- name: Set plugin-dep compact summary
  ansible.builtin.set_fact:
    plugin_deps_update_summary: >-
      {{
        (plugin_dep_update_plan | default([]) | length > 0)
        | ternary(
            '✅ Updated ' ~ (plugin_dep_update_plan | length) ~ ' plugin dependency version(s): ' ~
            (plugin_dep_update_plan | map(attribute='pair') | list | join(', ')),
            '⚪ No plugin dependency updates required.'
          )
      }}

- name: Show compact summaries
  ansible.builtin.debug:
    msg:
      plugins: "{{ plugins_update_summary }}"
      plugin_deps: "{{ plugin_deps_update_summary }}"