---
# Purpose: Enforce dependency versions from dependencies.json

# ---------- Load + normalize desired ----------
- block:
    - name: Load dependencies.json
      ansible.builtin.set_fact:
        deps_raw: "{{ lookup('file', dependencies_json_path) | from_json }}"

    - name: Validate dependencies.json shape
      ansible.builtin.assert:
        that:
          - deps_raw is mapping
        fail_msg: "Expected a JSON object of artifactId or groupId:artifactId → version pairs, got: {{ deps_raw | type_debug }}"

    - name: Normalize desired map
      ansible.builtin.set_fact:
        deps_desired: "{{ deps_raw | maven_normalize_desired }}"

    - name: dependencies.json summary
      ansible.builtin.debug:
        msg:
          total_entries: "{{ deps_desired | length }}"
          sample: "{{ (deps_desired | dict2items)[:5] }}"
      when: ansible_verbosity | int > 0
  when: deps_desired is not defined or deps_desired | length == 0

# ---------- Read POM dependencies ----------
- name: Read dependency artifactIds
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:dependencies/m:dependency/m:artifactId"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _dep_art

- name: Read dependency groupIds
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:dependencies/m:dependency/m:groupId"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _dep_grp

- name: Read dependency versions
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:dependencies/m:dependency/m:version"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _dep_ver

# ---------- Filter sanity probe (optional, verbose only) ----------
- name: Sanity check custom filters are loaded
  ansible.builtin.debug:
    msg:
      - "dep_rows loaded? => {{ ['a'] | maven_dep_rows(['g'], ['1.0']) | length }}"
      - "enforce_plan loaded? => {{ [] | maven_enforce_plan({}, 'literal') | length }}"
  when: ansible_verbosity | int > 0

# ---------- Build rows + compute plan (filters do the heavy lifting) ----------
- name: Build [{groupId, artifactId, version}] rows
  ansible.builtin.set_fact:
    pom_deps_list: "{{ _dep_art.matches | maven_dep_rows(_dep_grp.matches, _dep_ver.matches) }}"

- name: Compute dependency update plan (literal-only)
  ansible.builtin.set_fact:
    deps_plan: "{{ pom_deps_list | maven_enforce_plan(deps_desired, 'literal') }}"

- name: Dependency update plan summary
  ansible.builtin.debug:
    msg:
      planned_changes: "{{ deps_plan | length }}"
      sample: "{{ (deps_plan | default([]))[:5] }}"
  when: ansible_verbosity | int > 0

# ---------- Apply updates (group-qualified first, then artifact-only fallback) ----------
- name: Apply version updates (match on groupId + artifactId)
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:dependencies/m:dependency[m:groupId='{{ item.groupId }}' and m:artifactId='{{ item.artifactId }}']/m:version"
    namespaces: "{{ pom_ns }}"
    value: "{{ item.desired }}"
    state: present
  loop: "{{ deps_plan }}"
  loop_control:
    label: "{{ item.groupId }}:{{ item.artifactId }} → {{ item.current }} → {{ item.desired }}"
  register: _dep_update_result_grouped
  when:
    - deps_plan | length > 0
    - (item.groupId | default('') | trim | length) > 0

- name: Apply version updates (artifactId-only fallback)
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:dependencies/m:dependency[m:artifactId='{{ item.artifactId }}']/m:version"
    namespaces: "{{ pom_ns }}"
    value: "{{ item.desired }}"
    state: present
  loop: "{{ deps_plan }}"
  loop_control:
    label: "{{ item.artifactId }} → {{ item.current }} → {{ item.desired }}"
  register: _dep_update_result_artonly
  when:
    - deps_plan | length > 0
    - (item.groupId | default('') | trim | length) == 0

# ---------- Human summary for post_tasks ----------
- name: Set dependency enforcement summary
  ansible.builtin.set_fact:
    deps_update_summary: >-
      {{
        (deps_plan | length > 0)
        | ternary(
            '✅ Updated ' ~ (deps_plan | length) ~ ' dependency version(s): ' ~
            (deps_plan | map(attribute='artifactId') | list | join(', ')),
            '⚪ No dependency updates required.'
          )
      }}