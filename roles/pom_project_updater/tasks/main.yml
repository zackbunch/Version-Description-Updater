---
# -------------------------------------------------------------------
# Determine applications source
# -------------------------------------------------------------------
- name: Determine if applications already loaded
  ansible.builtin.set_fact:
    _apps_preloaded: "{{ applications is defined and applications | length > 0 }}"

# -------------------------------------------------------------------
# Source-of-truth: applications.json → desired project version
# -------------------------------------------------------------------
- name: Load applications.json if not preloaded
  when: not _apps_preloaded
  block:
    - name: Load applications.json
      ansible.builtin.set_fact:
        applications_raw: "{{ lookup('file', applications_json_path) | from_json }}"

    - name: Normalize keys to lowercase
      ansible.builtin.set_fact:
        applications: "{{ (applications | default({})) | combine({ (item.key | lower | trim): (item.value | trim) }) }}"
      loop: "{{ applications_raw | dict2items }}"

    - name: applications.json summary
      ansible.builtin.debug:
        msg:
          total_entries: "{{ applications | length }}"
          sample: "{{ (applications | dict2items)[:5] }}"

# -------------------------------------------------------------------
# Compute desired version and plan
# -------------------------------------------------------------------
- name: Compute desired project version (define even if missing)
  ansible.builtin.set_fact:
    new_version: "{{ (applications | default({})).get(pom_project.artifactId | default(''), '') }}"

- name: Planned project version change
  ansible.builtin.debug:
    msg:
      project: "{{ pom_project.groupId }}:{{ pom_project.artifactId }}"
      current: "{{ pom_project.version | default('') }}"
      desired: "{{ new_version | default('') }}"

# -------------------------------------------------------------------
# Update <project>/<version> if different (create node if missing)
# -------------------------------------------------------------------
- name: Update project version if different
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:version"
    namespaces: "{{ pom_ns }}"
    value: "{{ new_version }}"
    state: "{{ update_state }}"
  register: _update_result
  when:
    - (new_version | default('')) | length > 0
    - (pom_project.version | default('')) != (new_version | default(''))

# -------------------------------------------------------------------
# Verification & summary
# -------------------------------------------------------------------
- name: Re-read project version
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:version"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _verify_proj_ver

- name: Extract final version for comparison
  ansible.builtin.set_fact:
    _final_version: "{{ (_verify_proj_ver.matches | map('dict2items') | flatten | map(attribute='value') | first | default('')) | trim }}"

- name: Summarize project version enforcement result
  ansible.builtin.debug:
    msg: >-
      {{
        ((new_version | default('')) | length == 0)
          | ternary(
              '⚫ No desired version found in applications.json for ' ~ pom_project.artifactId,
              ((pom_project.version | default('')) != _final_version)
                | ternary(
                    '✅ Updated project version from ' ~ (pom_project.version | default('')) ~ ' to ' ~ _final_version,
                    '⚪ Project version already up to date (' ~ _final_version ~ ')'
                  )
            )
      }}