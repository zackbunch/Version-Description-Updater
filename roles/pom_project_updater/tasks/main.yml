---
- name: Read <groupId> from POM
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:groupId"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _gid

- name: Read <artifactId> from POM
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:artifactId"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _aid

- name: Read <version> from POM
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:version"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _ver

- name: Build normalized project metadata fact
  ansible.builtin.set_fact:
    pom_project:
      groupId:    "{{ _gid.matches | xml_first_trim }}"
      artifactId: "{{ _aid.matches | xml_first_trim | lower }}"
      version:    "{{ _ver.matches | xml_first_trim }}"

- name: Debug normalized project metadata
  ansible.builtin.debug:
    msg:
      groupId: "{{ pom_project.groupId }}"
      artifactId: "{{ pom_project.artifactId }}"
      version: "{{ pom_project.version }}"
  when: ansible_verbosity > 0
  
- name: Compute desired project version (define even if missing)
  ansible.builtin.set_fact:
    new_version: "{{ (applications | default({})).get(pom_project.artifactId | default(''), '') }}"

- name: Planned project version change
  ansible.builtin.debug:
    msg:
      project: "{{ pom_project.groupId }}:{{ pom_project.artifactId }}"
      current: "{{ pom_project.version | default('') }}"
      desired: "{{ new_version | default('') }}"
  when: ansible_verbosity > 0

- name: Update project version if different
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:version"
    namespaces: "{{ pom_ns }}"
    value: "{{ new_version }}"
    state: "{{ update_state }}"
  register: _update_result
  when:
    - (new_version | default('')) | length > 0
    - (pom_project.version | default('')) != (new_version | default(''))

- name: Re-read project version
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:version"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _verify_proj_ver

- name: Extract final version for comparison
  ansible.builtin.set_fact:
    _final_version: "{{ (_verify_proj_ver.matches | map('dict2items') | flatten | map(attribute='value') | first | default('')) | trim }}"

- name: Set project version enforcement summary
  ansible.builtin.set_fact:
    project_update_summary: >-
      {{
        ((new_version | default('')) | length == 0)
          | ternary(
              '⚫ No desired version found in applications.json for ' ~ pom_project.artifactId,
              ((pom_project.version | default('')) != _final_version)
                | ternary(
                    '✅ Updated project version from ' ~ (pom_project.version | default('')) ~ ' to ' ~ _final_version,
                    '⚪ Project version already up to date (' ~ _final_version ~ ')'
                  )
            )
      }}