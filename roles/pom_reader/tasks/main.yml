---
#
# Purpose: Read and normalize project, dependency, and plugin metadata from a pom.xml file.
#
- name: Ensure pom_file variable is defined
  ansible.builtin.assert:
    that:
      - pom_file is defined
      - pom_file | length > 0
    fail_msg: "pom_file must be provided (e.g., /path/to/project/pom.xml)"

- name: Read <groupId> from POM
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:groupId"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _gid

- name: Read <artifactId> from POM
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:artifactId"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _aid

- name: Read <version> from POM
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:version"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _ver

- name: Build normalized project metadata fact
  ansible.builtin.set_fact:
    pom_project:
      groupId:    "{{ _gid.matches | xml_first_trim }}"
      artifactId: "{{ _aid.matches | xml_first_trim | lower }}"
      version:    "{{ _ver.matches | xml_first_trim }}"

- name: Debug normalized project metadata
  ansible.builtin.debug:
    msg:
      groupId: "{{ pom_project.groupId }}"
      artifactId: "{{ pom_project.artifactId }}"
      version: "{{ pom_project.version }}"
  when: ansible_verbosity > 0

- name: Read dependency artifactIds
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:dependencies/m:dependency/m:artifactId"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _dep_art

- name: Read dependency groupIds
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:dependencies/m:dependency/m:groupId"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _dep_grp

- name: Read dependency versions
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:dependencies/m:dependency/m:version"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _dep_ver

- name: Normalize dependency matches to string lists
  ansible.builtin.set_fact:
    _dep_art_list: "{{ _dep_art.matches | xml_texts }}"
    _dep_grp_list: "{{ _dep_grp.matches | xml_texts }}"
    _dep_ver_list: "{{ _dep_ver.matches | xml_texts }}"

- name: Assert dependency lists align
  ansible.builtin.assert:
    that:
      - _dep_art_list | length == _dep_grp_list | length
      - _dep_art_list | length == _dep_ver_list | length
  when: _dep_art_list | length > 0

- name: Build pom_deps_list [{groupId, artifactId, version}]
  ansible.builtin.set_fact:
    pom_deps_list: "{{ (pom_deps_list | default([])) + [ {
      'groupId':    (_dep_grp_list[i] | default('') | trim),
      'artifactId': (_dep_art_list[i] | default('') | trim),
      'version':    (_dep_ver_list[i] | default('') | trim)
    } ] }}"
  loop: "{{ range(0, _dep_art_list | length) | list }}"
  loop_control:
    loop_var: i
  when: _dep_art_list | length > 0

- name: Show first few deps
  ansible.builtin.debug:
    msg: "{{ (pom_deps_list | default([]))[:5] }}"
  when: ansible_verbosity | int >= 1

- name: Read build plugin artifactIds
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/*[local-name()='project']/*[local-name()='build']/*[local-name()='plugins']/*[local-name()='plugin']/*[local-name()='artifactId']"
    content: text
  register: _pl_art

- name: Normalize plugin artifactIds
  ansible.builtin.set_fact:
    _pl_art_list: "{{ _pl_art.matches | xml_texts }}"

- name: Init plugin facts
  ansible.builtin.set_fact:
    pom_plugins_list: []
    pom_plugins_map: {}

- name: Read explicit version for each plugin
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/*[local-name()='project']/*[local-name()='build']/*[local-name()='plugins']/*[local-name()='plugin'][*[local-name()='artifactId']='{{ plugin }}']/*[local-name()='version']"
    content: text
  loop: "{{ _pl_art_list }}"
  loop_control:
    loop_var: plugin
    label: "{{ plugin }}"
  register: _pl_ver
  failed_when: false
  changed_when: false

- name: Count plugin dependencies for each plugin
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/*[local-name()='project']/*[local-name()='build']/*[local-name()='plugins']/*[local-name()='plugin'][*[local-name()='artifactId']='{{ plugin }}']/*[local-name()='dependencies']/*[local-name()='dependency']/*[local-name()='artifactId']"
    content: text
  loop: "{{ _pl_art_list }}"
  loop_control:
    loop_var: plugin
    label: "{{ plugin }}"
  register: _pl_dep_art
  failed_when: false
  changed_when: false

- name: Assert plugin reads returned aligned lengths
  ansible.builtin.assert:
    that:
      - _pl_art_list | length == (_pl_ver.results | length)
      - _pl_art_list | length == (_pl_dep_art.results | length)

- name: Accumulate plugin rows and map
  ansible.builtin.set_fact:
    pom_plugins_list: "{{ pom_plugins_list + [ {
      'artifactId': _pl_art_list[i],
      'version':    (_pl_ver.results[i] | xml_first_from_result),
      'has_deps':   ((_pl_dep_art.results[i] | xml_len) > 0),
      'dep_count':  (_pl_dep_art.results[i] | xml_len)
    } ] }}"
    pom_plugins_map: "{{ pom_plugins_map | combine({
      (_pl_art_list[i] | lower | trim): (_pl_ver.results[i] | xml_first_from_result)
    }) }}"
  loop: "{{ range(0, _pl_art_list | length) | list }}"
  loop_control:
    loop_var: i

- name: Explicit versions (per plugin)
  ansible.builtin.debug:
    msg: "{{ _pl_art_list[i] }} = {{ _pl_ver.results[i] | xml_first_from_result | default('') }}"
  loop: "{{ range(0, _pl_art_list | length) | list }}"
  loop_control:
    loop_var: i
  when: ansible_verbosity > 0

- name: Plugins summary
  ansible.builtin.debug:
    msg:
      count: "{{ pom_plugins_list | length }}"
      sample: "{{ pom_plugins_list[:5] }}"
  when: ansible_verbosity | int >= 1
