---
# -------------------------------------------------------------------
# Validate input
# -------------------------------------------------------------------

# Ensure the caller provided a valid POM path.
# This keeps the role self-contained and prevents silent failures later.
- name: Ensure pom_file variable is defined
  ansible.builtin.assert:
    that:
      - pom_file is defined
      - pom_file | length > 0
    fail_msg: "pom_file must be provided (e.g., /path/to/project/pom.xml)"



# -------------------------------------------------------------------
# Read project coordinates (groupId, artifactId, version)
# -------------------------------------------------------------------

# Read the <groupId> tag using Maven’s XML namespace.
# Will return an empty list if the tag is inherited from a parent POM.
- name: Read <groupId> from POM
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:groupId"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _gid

# Read the <artifactId> tag.
# This is the canonical identifier for the project and will be normalized later.
- name: Read <artifactId> from POM
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:artifactId"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _aid

# Read the <version> tag.
# May be empty if version is managed by a parent POM.
- name: Read <version> from POM
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:version"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _ver


# -------------------------------------------------------------------
# Combine results into a single project fact (normalized artifactId)
# -------------------------------------------------------------------

# Aggregate the parsed coordinates into one structured fact.
# The artifactId is lowercased to simplify downstream comparisons
# against dependency maps or JSON configs (artifact IDs are case-insensitive).
- name: Build normalized project metadata fact
  ansible.builtin.set_fact:
    pom_project:
      groupId:    "{{ (_gid.matches | map('dict2items') | flatten | map(attribute='value') | first | default('')) | trim }}"
      artifactId: "{{ (_aid.matches | map('dict2items') | flatten | map(attribute='value') | first | default('')) | trim | lower }}"
      version:    "{{ (_ver.matches | map('dict2items') | flatten | map(attribute='value') | first | default('')) | trim }}"

# Output a quick summary so pipeline logs show what was parsed.
# This aids in debugging namespace or lookup issues without extra verbosity.
- name: Debug normalized project metadata
  ansible.builtin.debug:
    msg:
      groupId: "{{ pom_project.groupId }}"
      artifactId: "{{ pom_project.artifactId }}"
      version: "{{ pom_project.version }}"


# -------------------------------------------------------------------
# Dependencies — Task 1: read all <artifactId> nodes
# -------------------------------------------------------------------

- name: Read dependency artifactIds
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:dependencies/m:dependency/m:artifactId"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _dep_artifacts

- name: Dependency artifactIds summary
  ansible.builtin.debug:
    msg:
      count: "{{ _dep_artifacts.matches | length }}"
      sample: "{{ (_dep_artifacts.matches | list)[:5] }}"

# -------------------------------------------------------------------
# Dependencies — Task 2: read groupIds + versions and assemble rows
# -------------------------------------------------------------------

- name: Read dependency groupIds
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:dependencies/m:dependency/m:groupId"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _dep_groups

- name: Read dependency versions
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/m:project/m:dependencies/m:dependency/m:version"
    content: text
    namespaces: "{{ pom_ns }}"
  register: _dep_versions

# Normalize module return shape → plain string lists
- name: Normalize dep lists to plain strings
  ansible.builtin.set_fact:
    _arts_list: >-
      {{ _dep_artifacts.matches
         | map('dict2items') | map('first') | map(attribute='value') | list }}
    _gids_list: >-
      {{ (_dep_groups.matches | default([]))
         | map('dict2items') | map('first') | map(attribute='value') | list }}
    _vers_list: >-
      {{ (_dep_versions.matches | default([]))
         | map('dict2items') | map('first') | map(attribute='value') | list }}

# Zip by index; tolerate missing groupId/version (default '')
- name: Build pom_deps_list [{groupId, artifactId, version}]
  ansible.builtin.set_fact:
    pom_deps_list: "{{ (pom_deps_list | default([])) + [ {
      'groupId':    (_gids_list[i]  | default('') | trim),
      'artifactId': (_arts_list[i]  | default('') | trim),
      'version':    (_vers_list[i]  | default('') | trim)} ] }}"
  loop: "{{ range(0, _arts_list | length) | list }}"
  loop_control:
    loop_var: i

- name: Show first few deps
  ansible.builtin.debug:
    msg: "{{ (pom_deps_list | default([]))[:5] }}"


# -------------------------------------------------------------------
# Build Plugins — artifactId → explicit version + dep count (robust)
# -------------------------------------------------------------------

- name: Read build plugin artifactIds
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/*[local-name()='project']/*[local-name()='build']/*[local-name()='plugins']/*[local-name()='plugin']/*[local-name()='artifactId']"
    content: text
  register: _pl_art

- name: Normalize plugin artifactIds
  set_fact:
    _pl_art_list: "{{ _pl_art.matches | xml_texts }}"

- name: Init plugin facts
  set_fact:
    pom_plugins_list: []
    pom_plugins_map: {}

# Read explicit version per plugin (tolerate missing)
- name: Read explicit version for each plugin
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/*[local-name()='project']/*[local-name()='build']/*[local-name()='plugins']/*[local-name()='plugin'][*[local-name()='artifactId']='{{ plugin }}']/*[local-name()='version']"
    content: text
  loop: "{{ _pl_art_list }}"
  loop_control:
    loop_var: plugin
    label: "{{ plugin }}"
  register: _pl_ver
  failed_when: false         # ← tolerate no match
  changed_when: false

# Count plugin dependencies per plugin (tolerate no dependencies)
- name: Count plugin dependencies for each plugin
  community.general.xml:
    path: "{{ pom_file }}"
    xpath: "/*[local-name()='project']/*[local-name()='build']/*[local-name()='plugins']/*[local-name()='plugin'][*[local-name()='artifactId']='{{ plugin }}']/*[local-name()='dependencies']/*[local-name()='dependency']/*[local-name()='artifactId']"
    content: text
  loop: "{{ _pl_art_list }}"
  loop_control:
    loop_var: plugin
    label: "{{ plugin }}"
  register: _pl_dep_art
  failed_when: false         # ← tolerate no match
  changed_when: false

# Accumulate rows + map using aligned indexes
- name: Accumulate plugin rows and map
  set_fact:
    pom_plugins_list: "{{ pom_plugins_list + [ {
      'artifactId': _pl_art_list[i],
      'version':    (((_pl_ver.results[i].matches | default([])) | xml_texts | first | default('')) | trim),
      'has_deps':   (((_pl_dep_art.results[i].matches | default([])) | length) > 0),
      'dep_count':  ((_pl_dep_art.results[i].matches | default([])) | length)
    } ] }}"
    pom_plugins_map: "{{ pom_plugins_map | combine({
      (_pl_art_list[i] | lower | trim): (((_pl_ver.results[i].matches | default([])) | xml_texts | first | default('')) | trim)
    }) }}"
  loop: "{{ range(0, _pl_art_list | length) | list }}"
  loop_control:
    loop_var: i

- name: Plugins summary
  debug:
    msg:
      count: "{{ pom_plugins_list | length }}"
      sample: "{{ pom_plugins_list[:5] }}"
  when: ansible_verbosity | int >= 1